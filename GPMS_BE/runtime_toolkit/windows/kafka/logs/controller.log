[2024-01-06 23:53:54,615] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2024-01-06 23:53:54,664] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2024-01-06 23:53:54,671] INFO [Controller id=0] Creating FeatureZNode at path: /feature with contents: FeatureZNode(2,Enabled,Map()) (kafka.controller.KafkaController)
[2024-01-06 23:53:54,753] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2024-01-06 23:53:54,760] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2024-01-06 23:53:54,765] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2024-01-06 23:53:54,768] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2024-01-06 23:53:54,795] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 25) (kafka.controller.KafkaController)
[2024-01-06 23:53:54,808] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2024-01-06 23:53:54,817] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2024-01-06 23:53:54,827] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2024-01-06 23:53:54,827] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2024-01-06 23:53:54,828] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2024-01-06 23:53:54,829] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2024-01-06 23:53:54,829] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2024-01-06 23:53:54,835] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2024-01-06 23:53:54,836] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2024-01-06 23:53:54,836] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2024-01-06 23:53:54,837] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2024-01-06 23:53:54,838] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2024-01-06 23:53:54,859] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2024-01-06 23:53:54,860] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2024-01-06 23:53:54,866] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2024-01-06 23:53:54,867] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2024-01-06 23:53:54,867] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2024-01-06 23:53:54,869] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2024-01-06 23:53:54,875] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2024-01-06 23:53:54,875] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2024-01-06 23:53:54,884] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2024-01-06 23:53:54,884] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2024-01-06 23:53:54,885] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2024-01-06 23:53:54,886] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2024-01-06 23:53:54,887] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2024-01-06 23:53:54,910] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2024-01-06 23:53:55,366] INFO [RequestSendThread controllerId=0] Controller 0 connected to CCRM14LTP:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-01-06 23:53:59,925] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-06 23:53:59,926] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-06 23:58:59,937] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-06 23:58:59,937] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 00:03:59,943] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 00:03:59,943] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 00:18:07,459] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2024-01-07 00:18:07,526] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 2 and epoch zk version is now 2 (kafka.controller.KafkaController)
[2024-01-07 00:18:07,531] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2024-01-07 00:18:07,549] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2024-01-07 00:18:07,555] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2024-01-07 00:18:07,559] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2024-01-07 00:18:07,591] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 63) (kafka.controller.KafkaController)
[2024-01-07 00:18:07,605] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2024-01-07 00:18:07,616] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2024-01-07 00:18:07,627] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2024-01-07 00:18:07,628] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2024-01-07 00:18:07,628] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2024-01-07 00:18:07,629] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2024-01-07 00:18:07,629] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2024-01-07 00:18:07,633] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2024-01-07 00:18:07,633] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2024-01-07 00:18:07,634] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2024-01-07 00:18:07,634] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2024-01-07 00:18:07,636] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2024-01-07 00:18:07,660] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 00:18:07,661] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 00:18:07,666] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 00:18:07,668] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 00:18:07,668] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2024-01-07 00:18:07,669] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2024-01-07 00:18:07,676] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2024-01-07 00:18:07,677] INFO [Controller id=0] Ready to serve as the new controller with epoch 2 (kafka.controller.KafkaController)
[2024-01-07 00:18:07,685] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2024-01-07 00:18:07,686] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2024-01-07 00:18:07,687] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2024-01-07 00:18:07,688] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2024-01-07 00:18:07,691] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2024-01-07 00:18:07,713] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2024-01-07 00:18:08,178] INFO [RequestSendThread controllerId=0] Controller 0 connected to CCRM14LTP:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-01-07 00:18:12,718] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 00:18:12,719] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:02:04,942] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2024-01-07 13:02:04,978] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 3 and epoch zk version is now 3 (kafka.controller.KafkaController)
[2024-01-07 13:02:04,981] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2024-01-07 13:02:04,992] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2024-01-07 13:02:04,996] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2024-01-07 13:02:04,999] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2024-01-07 13:02:05,019] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 133) (kafka.controller.KafkaController)
[2024-01-07 13:02:05,025] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2024-01-07 13:02:05,032] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2024-01-07 13:02:05,038] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2024-01-07 13:02:05,038] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2024-01-07 13:02:05,039] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2024-01-07 13:02:05,039] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2024-01-07 13:02:05,039] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2024-01-07 13:02:05,042] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2024-01-07 13:02:05,042] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2024-01-07 13:02:05,043] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2024-01-07 13:02:05,043] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2024-01-07 13:02:05,044] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2024-01-07 13:02:05,059] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 13:02:05,060] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 13:02:05,064] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 13:02:05,064] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2024-01-07 13:02:05,065] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2024-01-07 13:02:05,066] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2024-01-07 13:02:05,069] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2024-01-07 13:02:05,069] INFO [Controller id=0] Ready to serve as the new controller with epoch 3 (kafka.controller.KafkaController)
[2024-01-07 13:02:05,074] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2024-01-07 13:02:05,074] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2024-01-07 13:02:05,074] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2024-01-07 13:02:05,074] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2024-01-07 13:02:05,075] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2024-01-07 13:02:05,087] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2024-01-07 13:02:05,565] INFO [RequestSendThread controllerId=0] Controller 0 connected to CCRM14LTP:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-01-07 13:02:10,091] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:02:10,091] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:07:10,106] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:07:10,106] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:12:10,114] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:12:10,115] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:17:10,120] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:17:10,120] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:22:10,125] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:22:10,125] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:27:10,130] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:27:10,130] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:32:10,146] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:32:10,146] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:37:10,159] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:37:10,160] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:42:10,175] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:42:10,175] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:47:10,180] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:47:10,180] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:52:10,194] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:52:10,194] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 13:57:10,205] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 13:57:10,205] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:02:10,207] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:02:10,207] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:07:10,214] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:07:10,214] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:12:10,226] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:12:10,226] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:17:10,229] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:17:10,229] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:22:10,241] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:22:10,241] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:27:10,244] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:27:10,244] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:32:10,247] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:32:10,247] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:37:10,253] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:37:10,253] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:42:10,256] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:42:10,257] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:47:10,265] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:47:10,265] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:52:10,271] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:52:10,271] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 14:57:10,272] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 14:57:10,272] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 15:02:10,285] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2024-01-07 15:02:10,288] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2024-01-07 15:02:15,682] INFO [Controller id=0] New topics: [Set(follow, delete, publish)], deleted topics: [Set()], new partition replica assignment [Set(TopicIdReplicaAssignment(follow,Some(fHWdQhICRMOqZmzJhnD1yA),Map(follow-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))), TopicIdReplicaAssignment(delete,Some(_T5XV1n8SxSLSTvMvV_aFQ),Map(delete-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))), TopicIdReplicaAssignment(publish,Some(CJN_SehLQyaeZ-aFiJQ2Pw),Map(publish-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2024-01-07 15:02:15,697] INFO [Controller id=0] New partition creation callback for follow-0,delete-0,publish-0 (kafka.controller.KafkaController)
[2024-01-07 15:02:15,829] INFO [RequestSendThread controllerId=0] Controller 0 connected to CCRM14LTP:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2024-01-07 15:02:15,838] INFO [Controller id=0] New topics: [Set(__consumer_offsets, comment, like)], deleted topics: [Set()], new partition replica assignment [Set(TopicIdReplicaAssignment(like,Some(a2heFrXpSHqXt1BXgK_b8Q),Map(like-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))), TopicIdReplicaAssignment(__consumer_offsets,Some(z_3_HE5tS4esL1u0PgJ9wQ),Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))), TopicIdReplicaAssignment(comment,Some(pgots94cTWysu6gDWv4XSA),Map(comment-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2024-01-07 15:02:15,841] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,like-0,comment-0,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
